import os
import shutil
from pathlib import Path
from typing import Iterable, List, Optional, Sequence, Set

from setuptools import Command

from buildkit.utils import get_cpy_suffix
from buildkit.summary import filter_files


TEMP_BUILD_DIR = os.environ.get("BUILD_TEMP_DIR", ".build_package_tmp")

# Default suffix patterns that will be removed by the clean command.
# Compiled suffix needs to be detected dynamically for cross-platform support.
_DEFAULT_COMPILED_SUFFIX = get_cpy_suffix()
C_SOURCE_PATTERNS: Sequence[str] = ("*.c",)
COMPILED_SUFFIX_PATTERNS: Sequence[str] = (
    f"*{_DEFAULT_COMPILED_SUFFIX}" if _DEFAULT_COMPILED_SUFFIX else "*.so",
    "*.so",
    "*.pyd",
)
DEFAULT_SUFFIX_PATTERNS: Sequence[str] = (*C_SOURCE_PATTERNS, *COMPILED_SUFFIX_PATTERNS)


def normalize_patterns(patterns: Sequence[str]) -> List[str]:
    seen: Set[str] = set()
    normalized: List[str] = []
    for pattern in patterns:
        if not pattern:
            continue
        value = pattern.strip()
        if not value:
            continue
        if value.startswith('.'):
            value = f"*{value}"
        if value not in seen:
            seen.add(value)
            normalized.append(value)
    return normalized


def iter_matched_files(patterns: Sequence[str], base_path: Path = Path(".")) -> List[Path]:
    """Return a list of files matching the provided glob patterns."""

    base_path = Path(base_path)
    matched: Set[Path] = set()
    for pattern in normalize_patterns(patterns):
        for path in base_path.rglob(pattern):
            if path.is_file():
                matched.add(path)
    return sorted(matched)


def remove_files(files: Iterable[Path]) -> List[Path]:
    """Remove the provided files and return the successfully deleted ones."""

    removed: List[Path] = []
    for file_path in files:
        try:
            resolved = Path(file_path)
            resolved.unlink()
            removed.append(resolved)
            print(f"ðŸ—‘ Removed {file_path}")
        except FileNotFoundError:
            continue
        except Exception as exc:  # pragma: no cover - log unexpected errors
            print(f"âš  Failed to remove {file_path}: {exc}")
    return removed


def collect_artifacts(
    patterns: Sequence[str],
    *,
    keep_patterns: Optional[Sequence[str]] = None,
    base_path: Path = Path("."),
) -> List[Path]:
    """Collect files matching ``patterns`` while honoring optional keep filters."""

    base_path = Path(base_path)
    matched_files = iter_matched_files(patterns, base_path)
    if not keep_patterns:
        return matched_files
    return list(filter_files(matched_files, normalize_patterns(keep_patterns)))


def remove_build_dirs(base_path: Path = Path(".")) -> None:
    """Remove common build directories relative to ``base_path``."""

    base_path = Path(base_path)
    shutil.rmtree(base_path / "build", ignore_errors=True)
    shutil.rmtree(base_path / TEMP_BUILD_DIR, ignore_errors=True)


def clean_artifacts(
    patterns: Sequence[str],
    *,
    keep_patterns: Optional[Sequence[str]] = None,
    base_path: Path = Path("."),
    remove_build_directories: bool = True,
) -> List[Path]:
    """Remove files matching ``patterns`` and optionally delete build directories."""

    targets = collect_artifacts(
        patterns,
        keep_patterns=keep_patterns,
        base_path=base_path,
    )
    removed = remove_files(targets)
    if remove_build_directories:
        remove_build_dirs(base_path=base_path)
    return removed


class CleanCommand(Command):
    """Clean build artifacts such as .c, .so/.pyd files and build directories."""

    description = "Clean build artifacts generated by buildkit and setuptools"
    user_options = [
        (
            "suffixes=",
            None,
            "Comma separated glob patterns for files to remove (default: *.c, *.so, *.pyd)",
        )
    ]

    def initialize_options(self):
        self.suffixes: Optional[Sequence[str]] = None
        self._patterns: List[str] = list(DEFAULT_SUFFIX_PATTERNS)

    def finalize_options(self):
        if self.suffixes is None:
            env_suffixes = os.environ.get("BUILD_CLEAN_SUFFIXES")
            if env_suffixes:
                self.suffixes = env_suffixes

        if isinstance(self.suffixes, str):
            parsed = [part.strip() for part in self.suffixes.split(",") if part.strip()]
            self._patterns = normalize_patterns(parsed or DEFAULT_SUFFIX_PATTERNS)
        elif self.suffixes is None:
            self._patterns = list(normalize_patterns(DEFAULT_SUFFIX_PATTERNS))
        else:
            self._patterns = normalize_patterns(list(self.suffixes))

    def set_suffixes(self, suffixes: Sequence[str]):
        """Allow programmatic configuration of suffix patterns."""

        self._patterns = normalize_patterns(suffixes)

    def run(self):
        clean_artifacts(
            self._patterns,
            keep_patterns=None,
            base_path=Path.cwd(),
            remove_build_directories=True,
        )
